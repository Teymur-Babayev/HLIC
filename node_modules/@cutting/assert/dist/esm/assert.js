var FailureType;
(function (FailureType) {
    FailureType["Condition"] = "Condition";
    FailureType["NoValue"] = "NoValue";
})(FailureType || (FailureType = {}));
const messageFormatter = (failureType, message, props) => {
    const typeMap = {
        [FailureType.Condition]: 'Assert condition failed',
        [FailureType.NoValue]: 'Assert value not undefined/null failed',
    };
    const msg = typeMap[failureType] + (message ? `: ${message}` : '') + (props ? `: ${JSON.stringify(props)}` : '');
    return msg;
};
const errorCreatorFactory = (formatter) => {
    return (failureType, message, props) => new Error(formatter(failureType, message, props));
};
const defaultConfiguration = {
    formatter: messageFormatter,
    errorCreator: errorCreatorFactory(messageFormatter),
};
let configuration = defaultConfiguration;
/**
 * Customize formatting of assertion failure messages, creation of failure Errors and reporting of failures
 * @param custom
 */
export function configureAssert(custom) {
    const newConfig = {
        ...configuration,
        ...custom,
    };
    newConfig.errorCreator = custom.errorCreator || errorCreatorFactory(newConfig.formatter);
    configuration = newConfig;
}
/**
 * For test purpose
 */
export function testResetConfiguration() {
    configuration = defaultConfiguration;
}
export const assert = (conditionOrValue, message, props) => {
    if (typeof conditionOrValue === 'boolean') {
        if (!conditionOrValue) {
            const properties = typeof props === 'function' ? props() : props;
            const error = configuration.errorCreator(FailureType.Condition, message, properties);
            if (configuration.errorReporter) {
                configuration.errorReporter(FailureType.Condition, error, message, properties);
            }
            throw error;
        }
        return;
    }
    if (typeof conditionOrValue === 'undefined' || conditionOrValue === null) {
        const properties = typeof props === 'function' ? props() : props;
        const error = configuration.errorCreator(FailureType.NoValue, message, properties);
        if (configuration.errorReporter) {
            configuration.errorReporter(FailureType.NoValue, error, message, properties);
        }
        throw error;
    }
    return conditionOrValue;
};
//# sourceMappingURL=assert.js.map