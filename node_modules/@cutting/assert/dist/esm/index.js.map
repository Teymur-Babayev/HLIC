{"version":3,"file":"index.js","sources":["../../src/assert.ts"],"sourcesContent":["enum FailureType {\n  Condition = 'Condition',\n  NoValue = 'NoValue',\n}\n\ntype ErrorFormatter = (failureType: FailureType, message?: string, props?: object) => string;\n\ntype ErrorCreator = (failureType: FailureType, message?: string, props?: object) => Error;\n\ntype ErrorReporter = (failureType: FailureType, error: Error, message?: string, props?: object) => void;\n\ntype WarningReporter = (failureType: FailureType, message?: string, props?: object) => void;\n\nexport type AssertConfiguration = {\n  formatter?: ErrorFormatter;\n  errorCreator?: ErrorCreator;\n  errorReporter?: ErrorReporter;\n  warningReporter?: WarningReporter;\n};\n\ntype RequiredConfiguration = {\n  formatter: ErrorFormatter;\n  errorCreator: ErrorCreator;\n  errorReporter?: ErrorReporter;\n  warningReporter?: WarningReporter;\n};\n\nconst messageFormatter: ErrorFormatter = (failureType: FailureType, message?: string, props?: object): string => {\n  const typeMap = {\n    [FailureType.Condition]: 'Assert condition failed',\n    [FailureType.NoValue]: 'Assert value not undefined/null failed',\n  };\n\n  const msg = typeMap[failureType] + (message ? `: ${message}` : '') + (props ? `: ${JSON.stringify(props)}` : '');\n\n  return msg;\n};\n\nconst errorCreatorFactory = (formatter: ErrorFormatter): ErrorCreator => {\n  return (failureType: FailureType, message?: string, props?: object) =>\n    new Error(formatter(failureType, message, props));\n};\n\nconst defaultConfiguration: RequiredConfiguration = {\n  formatter: messageFormatter,\n  errorCreator: errorCreatorFactory(messageFormatter),\n};\n\nlet configuration = defaultConfiguration;\n\n/**\n * Customize formatting of assertion failure messages, creation of failure Errors and reporting of failures\n * @param custom\n */\nexport function configureAssert(custom: AssertConfiguration): void {\n  const newConfig: RequiredConfiguration = {\n    ...configuration,\n    ...custom,\n  };\n\n  newConfig.errorCreator = custom.errorCreator || errorCreatorFactory(newConfig.formatter);\n\n  configuration = newConfig;\n}\n\n/**\n * For test purpose\n */\nexport function testResetConfiguration(): void {\n  configuration = defaultConfiguration;\n}\n\ninterface Assert {\n  /**\n   * Verify that a condition is satisfied.\n   * @param condition Condition to be true\n   * @param message Error message\n   * @param props Any props relevant.\n   * @throws Throws exception if condition is false.\n   */\n  (condition: boolean, message?: string, props?: object | (() => object)): asserts condition;\n\n  /**\n   * Verify that an optional value actually has a proper value in this context, i.e. not null or undefined.\n   * @param value Value to be verified\n   * @param message Error message\n   * @param props If message is a string id, format any matching key values into message. Props are also reported to dev team.\n   * @throws Throws exception if value is null or undefined\n   */\n  <T>(value: T | undefined | null, message?: string, props?: object | (() => object)): T;\n}\n\nexport const assert: Assert = <T>(\n  conditionOrValue: T | boolean | undefined | null,\n  message?: string,\n  props?: object | (() => object),\n): void | T => {\n  if (typeof conditionOrValue === 'boolean') {\n    if (!conditionOrValue) {\n      const properties = typeof props === 'function' ? props() : props;\n      const error = configuration.errorCreator(FailureType.Condition, message, properties);\n\n      if (configuration.errorReporter) {\n        configuration.errorReporter(FailureType.Condition, error, message, properties);\n      }\n\n      throw error;\n    }\n    return;\n  }\n\n  if (typeof conditionOrValue === 'undefined' || conditionOrValue === null) {\n    const properties = typeof props === 'function' ? props() : props;\n    const error = configuration.errorCreator(FailureType.NoValue, message, properties);\n\n    if (configuration.errorReporter) {\n      configuration.errorReporter(FailureType.NoValue, error, message, properties);\n    }\n\n    throw error;\n  }\n\n  return conditionOrValue;\n};\n"],"names":["FailureType","messageFormatter","failureType","message","props","Condition","NoValue","JSON","stringify","errorCreatorFactory","formatter","Error","configuration","errorCreator","configureAssert","custom","newConfig","assert","conditionOrValue","properties","error","errorReporter"],"mappings":"AAAA,IAAKA,GAAL,SAAKA,GACHA,EAAA,UAAA,YACAA,EAAA,QAAA,SACD,CAHD,CAAKA,IAAAA,EAGJ,CAAA,IAwBD,MAAMC,EAAmC,CAACC,EAA0BC,EAAkBC,KACpE,CACd,CAACJ,EAAYK,WAAY,0BACzB,CAACL,EAAYM,SAAU,0CAGLJ,IAAgBC,EAAU,KAAKA,IAAY,KAAOC,EAAQ,KAAKG,KAAKC,UAAUJ,KAAW,KAKzGK,EAAuBC,GACpB,CAACR,EAA0BC,EAAkBC,IAClD,IAAIO,MAAMD,EAAUR,EAAaC,EAASC,IAQ9C,IAAIQ,EALgD,CAClDF,UAAWT,EACXY,aAAcJ,EAAoBR,IAS9B,SAAUa,EAAgBC,GAC9B,MAAMC,EAAmC,IACpCJ,KACAG,GAGLC,EAAUH,aAAeE,EAAOF,cAAgBJ,EAAoBO,EAAUN,WAE9EE,EAAgBI,CAClB,CA6Ba,MAAAC,EAAiB,CAC5BC,EACAf,EACAC,KAEA,GAAgC,kBAArBc,EAAX,CAcA,GAAI,MAAOA,EAA+D,CACxE,MAAMC,EAA8B,mBAAVf,EAAuBA,IAAUA,EACrDgB,EAAQR,EAAcC,aAAab,EAAYM,QAASH,EAASgB,GAMvE,MAJIP,EAAcS,eAChBT,EAAcS,cAAcrB,EAAYM,QAASc,EAAOjB,EAASgB,GAG7DC,CACP,CAED,OAAOF,CAbN,CAXC,IAAKA,EAAkB,CACrB,MAAMC,EAA8B,mBAAVf,EAAuBA,IAAUA,EACrDgB,EAAQR,EAAcC,aAAab,EAAYK,UAAWF,EAASgB,GAMzE,MAJIP,EAAcS,eAChBT,EAAcS,cAAcrB,EAAYK,UAAWe,EAAOjB,EAASgB,GAG/DC,CACP,CAeoB"}