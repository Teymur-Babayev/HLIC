import{useEffect as e,useLayoutEffect as t,useState as r,useRef as n,useCallback as o,useMemo as i}from"react";import u from"resize-observer-polyfill";import{useDebouncedCallback as c}from"use-debounce";import{assert as a}from"@cutting/assert";const d=e=>e,s="undefined"==typeof window?e:t,h={bottom:void 0,height:void 0,left:void 0,width:void 0,right:void 0,top:void 0,x:void 0,y:void 0},m=(e,{debounceDelay:t=500,initialValues:m=h,transformFunc:f=(e=>e),maxDifference:l=10,callback:v=d}={})=>{const[b,p]=r({...h,...m}),w=n(0),g=n(m),y=o(f,[f]);a(!!e,"You must pass a valid ref to useParentSize");const M=c((e=>{p(e),v(e)}),t,{leading:!0}),x=e.current;return s((()=>{if(null==x){if(w.current>10)throw new Error("Maximum rerender count and no refElement Found");return p({...b}),void w.current++}const e=new u((e=>{if(!Array.isArray(e)||1!==e.length)return;const t=e[0],r=Math.round(t.contentRect.width),n=Math.round(t.contentRect.height),o=Math.abs(r-(g.current.width??0)),i=Math.abs(n-(g.current.height??0));(o>l||i>l)&&(g.current.height=n,g.current.width=r,M(t.contentRect))}));return requestAnimationFrame((()=>e?.observe(x))),()=>{x&&e?.unobserve(x)}}),[l,M,x,m,b]),i((()=>y(b)),[b,y])};export{m as useParentSize};
//# sourceMappingURL=index.js.map
